

alpine:3.19


docker run -tid --platform linux/arm64 --network local-bridge -v /var/run/docker.sock:/var/run/docker.sock -v /Users/fausto.branco/OneDrive/Work/Python:/work --name test_python registry.devops-db.internal:5000/base_alpine:3.19

--dns="172."



docker run -tid --platform linux/arm64 --network local-bridge -v /var/run/docker.sock:/var/run/docker.sock -v /Users/fausto.branco/OneDrive/Work/Python:/work --name test_python registry.devops-db.internal:5000/base_alpine:3.19

docker exec -it -u root --privileged test_python /bin/sh

apk add --no-cache python3 py3-pip docker
rm /usr/lib/python3.11/EXTERNALLY-MANAGED

apk add shellcheck

# apk add go
# apk add build-base


wget https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
chmod +x /usr/local/bin/hadolint

wget https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-arm64
mv hadolint-Linux-arm64 /usr/local/bin/hadolint
chmod +x /usr/local/bin/hadolint




hadolint Dockerfile






## pip install docker
## https://docker-py.readthedocs.io/en/stable/images.html

import docker

str_Registry = 'registry.devops-db.internal:5000'
str_Image = 'test_alpine'
str_Version = '1.0.1'
img_Tag = str_Registry + '/' + str_Image + ':' + str_Version

#######################################################################################################################################
### Using the client, it is not possible to stream the log in Build.
###   The only way is to use Low-level API

client = docker.APIClient(base_url='unix://var/run/docker.sock')
for line in client.build(path='/work/docker', rm=True,  tag=str_Image + ':' + str_Version):
    print(line)

#######################################################################################################################################
obj_Return = docker.from_env().images.get(str_Image + ':' + str_Version).tag(img_Tag)

for line in client.push(img_Tag, stream=True, decode=True):
    print(line)

obj_Return = client.remove_image(image=img_Tag, force=True)
obj_Return = client.remove_image(image=str_Image + ':' + str_Version, force=True)
